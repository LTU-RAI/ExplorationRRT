#!/usr/bin/env python
PACKAGE = "errt"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#           Name                 Type      Level Description                                            Default

# RRT general parameters
gen.add("Run_by_nodes",                 bool_t,   0,    "Run by number_of_nodes if true and by Number_of_itterations if false", True)
gen.add("Number_of_nodes",              int_t,    0,    "The amount of nodes in the RRT-tree", 3000)
gen.add("Number_of_goals",              int_t,    0,    "The amount of goals to be generated", 40)
gen.add("Number_of_itterations",        int_t,    0,    "The maximum number of itterations, for when you run by itterations", 3000)
gen.add("Resolution",                   double_t, 0,    "The size of the voxels in ufomap", 0.4)

# RRT-tree parameters
gen.add("Distance_between_nodes",       double_t, 0,    "The distance between nodes in a finished path", 0.3)
gen.add("Distance_between_goals",       double_t, 0,    "The minimum guranteed distance between generated goals", 0.4)
gen.add("Minimum_distance_to_goal",     double_t, 0,    "The minimum guaranteed distance between generated goals and the root", 0.7)
gen.add("Radious",                      double_t, 0,    "The radious for sphere checks", 0.7)
gen.add("Bounding_box_radious",         double_t, 0,    "The bounding box 'radius', signifying the border between local and global space", 20)

# Enable / disable
# gen.add("Enable_global_rrt",         double_t, 0,    "This is description", 1.0, 0, 100)
# gen.add("Enable_global_backtrack",         double_t, 0,    "This is description", 1.0, 0, 100)
# gen.add("Enable_stickyfloors",         double_t, 0,    "This is description", 1.0, 0, 100)
# gen.add("Enable_nmpc",         double_t, 0,    "This is description", 1.0, 0, 100)

# Tuning parameters
gen.add("Scaler_distance_cost",         double_t, 0,    "The scaler for the distance cost during path evaluation", 1.0)
gen.add("Scaler_information_gain",      double_t, 0,    "The scaler for the information gain during path evaluation", 8)
gen.add("Scaler_actuation_cost",        double_t, 0,    "The scaler for the actuation cost during path evaluation", 0.005)
gen.add("Next_path_distance",           double_t, 0,    "The distance from the current goal at which a new path will be calculated", 0.5)
gen.add("Next_point_distance",          double_t, 0,    "The distance from the current point at which the next point in the path will be set to current point", 0.5)

# Sensor parameters
gen.add("Sensor_range",                 double_t, 0,    "The range of the lidar sensor, used for information gain calculations", 8)
gen.add("Sensor_min",                   double_t, 0,    "The distance at which the sensor will exclude hits, as to not include occupation hits from the drone itself", 0.5)
gen.add("Sensor_angle_horizontal",      double_t, 0,    "The horizontal angle for the bounding volume used for information gain calculations, given in radians", 0.785)
gen.add("Sensor_angle_vertical",        double_t, 0,    "The vertical angle for the bounding volume used for information gain calculations, given in radians",  0.393)

# NMPC parameters
gen.add("NMPC_points",                  int_t,    0,    "The amount of points in the NMPC", 50)
gen.add("NMPC_dt",                      double_t, 0,    "The amount of time between points", 0.3)
# gen.add("parameter_1",         double_t, 0,    "This is description", 1.0, 0, 100)
# gen.add("parameter_2",         double_t, 0,    "This is description", 1.0, 0, 100)
# gen.add("parameter_3",         double_t, 0,    "This is description", 1.0, 0, 100)
# gen.add("parameter_4",         double_t, 0,    "This is description", 1.0, 0, 100)
# gen.add("parameter_5",         double_t, 0,    "This is description", 1.0, 0, 100)
# gen.add("parameter_6",         double_t, 0,    "This is description", 1.0, 0, 100)
# gen.add("parameter_7",         double_t, 0,    "This is description", 1.0, 0, 100)
# gen.add("parameter_8",         double_t, 0,    "This is description", 1.0, 0, 100)
# gen.add("parameter_9",         double_t, 0,    "This is description", 1.0, 0, 100)




exit(gen.generate(PACKAGE, "errt", "Server"))
